//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.9
//
package com.egobeta.ego;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.location.Location;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.ViewPager;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ListView;

import com.amazonaws.mobile.AWSMobileClient;
import com.amazonaws.mobile.user.IdentityManager;
import com.amazonaws.mobileconnectors.cognito.Dataset;
import com.amazonaws.mobileconnectors.cognito.DefaultSyncCallback;
import com.amazonaws.mobileconnectors.cognito.Record;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBMapper;
import com.egobeta.R;
import com.egobeta.ego.OnBoarding.OnBoardingFragment;
import com.egobeta.ego.demo.DemoConfiguration;

import android.app.AlertDialog;
import android.content.IntentFilter;
import android.content.BroadcastReceiver;
import android.support.v4.content.LocalBroadcastManager;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.egobeta.ego.navigation.NavigationDrawer;
import com.egobeta.ego.demo.UserSettings;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.viewpagerindicator.CirclePageIndicator;

import java.util.List;

public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    /** Class name for log messages. */
    private final static String LOG_TAG = MainActivity.class.getSimpleName();

    /** Bundle key for saving/restoring the toolbar title. */
    private final static String BUNDLE_KEY_TOOLBAR_TITLE = "title";

    /** The identity manager used to keep track of the current user account. */
    private IdentityManager identityManager;

    /** The toolbar view control. */
    private Toolbar toolbar;

    /** Our navigation drawer class for handling navigation drawer logic. */
    private NavigationDrawer navigationDrawer;

    /** The helper class used to toggle the left navigation drawer open and closed. */
    private ActionBarDrawerToggle drawerToggle;

    private Button signOutButton;

    private static int DEFAULT_TITLE_BAR_COLOR = 0xFFF2625E; // ego's color
    private int titleBarColor = DEFAULT_TITLE_BAR_COLOR;

    private ViewPager mViewPager = null;
    static CirclePageIndicator pageIndicator;
    public static String facebookId;
    Fragment egoStream;
    LocationUpdater locationUpdater;
    DynamoDBMapper mapper;
    boolean isCreated = false;

    /**
     * Initializes the Toolbar for use with the activity.
     */
    private void setupToolbar(final Bundle savedInstanceState) {
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        // Set up the activity to use this toolbar. As a side effect this sets the Toolbar's title
        // to the activity's title.
        toolbar.setBackgroundColor(titleBarColor);
        toolbar.setTitle("");
        setSupportActionBar(toolbar);

        if (savedInstanceState != null) {
            // Some IDEs such as Android Studio complain about possible NPE without this check.
            assert getSupportActionBar() != null;

            // Restore the Toolbar's title.
//            getSupportActionBar().setTitle(savedInstanceState.getCharSequence(BUNDLE_KEY_TOOLBAR_TITLE));
            getSupportActionBar().setTitle("");
        }
    }





    /**
     * Initializes the sign-in and sign-out buttons.
     */
    private void setupSignInButtons() {

        signOutButton = (Button) findViewById(R.id.button_signout);
        signOutButton.setOnClickListener(this);
    }

    /**
     * Initializes the navigation drawer menu to allow toggling via the toolbar or swipe from the
     * side of the screen.
     */
    private void setupNavigationMenu(final Bundle savedInstanceState) {
        final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        final ListView drawerItems = (ListView) findViewById(R.id.nav_drawer_items);

        // Create the navigation drawer.
        navigationDrawer = new NavigationDrawer(this, toolbar, drawerLayout, drawerItems,
            R.id.main_fragment_container);

        // Add navigation drawer menu items.
        // Home isn't a demo, but is fake as a demo.
        DemoConfiguration.DemoFeature home = new DemoConfiguration.DemoFeature();
        home.iconResId = R.mipmap.icon_home;
        home.titleResId = R.string.main_nav_menu_item_home;
        navigationDrawer.addDemoFeatureToMenu(home);

//        for (DemoConfiguration.DemoFeature demoFeature : DemoConfiguration.getDemoFeatureList()) {
//            navigationDrawer.addDemoFeatureToMenu(demoFeature);
//        }
        setupSignInButtons();

        if (savedInstanceState == null) {
            //Go to main or onBoarding depending if first time user
            egoStream = new EgoStream();
            ((EgoStream)egoStream).setLocationUpdater(locationUpdater);
            isItNewUser();
        }
    }

    /** Detects whether or not we need to go through the onboarding process **/
    private void isItNewUser(){
        if(getIntent().hasExtra("new_user")){
            int isNewUser = getIntent().getExtras().getInt("new_user");

            if(isNewUser == 0){
                //new user, display OnBoarding Process
                setOnBoardingVisible();
                setUpViewPager();
                setUpPageIndicator();
                new AsynchronousOnBoarding(getApplicationContext(), this);

            } else {
                // Add the home fragment to be displayed initially.
                //not a new user, go to egostream
                new AsynchronousProfileUpdating(getApplicationContext(), this, facebookId);
                navigationDrawer.showHome(egoStream);

            }
        } else {
            // Add the home fragment to be displayed initially.
            //not a new user, go to egostream
            new AsynchronousProfileUpdating(getApplicationContext(), this, facebookId);
            navigationDrawer.showHome(egoStream);
        }
    }

    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Obtain a reference to the mobile client. It is created in the Application class,
        // but in case a custom Application class is not used, we initialize it here if necessary.
        AWSMobileClient.initializeMobileClientIfNecessary(this);

        // Obtain a reference to the mobile client. It is created in the Application class.
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // Obtain a reference to the identity manager.
        identityManager = awsMobileClient.getIdentityManager();

        //Initialize the mapper for DynamoDB
        mapper = awsMobileClient.getDynamoDBMapper();

        locationUpdater = new LocationUpdater(MainActivity.this, getApplicationContext(), identityManager, mapper);

        facebookId = identityManager.getUserFacebookId();

        setContentView(R.layout.activity_main);

        setupToolbar(savedInstanceState);

        setupNavigationMenu(savedInstanceState);

        setUpPageIndicator();








    }

    public void startTheLocationUpdater(){
        theMapOnCreateMethod();
        theMapOnStartMethod();
        theMapOnResumeMethod();
        isCreated = true;
    }

    private void setUpViewPager() {

        mViewPager = (ViewPager) findViewById(R.id.pager);
        mViewPager.setOffscreenPageLimit(3);
        mViewPager.setOverScrollMode(View.OVER_SCROLL_NEVER);
        OnBoardPagerAdapter mPagerAdapter = new OnBoardPagerAdapter(getSupportFragmentManager());
        mViewPager.setAdapter(mPagerAdapter);
    }

    private void setOnBoardingVisible() {
        RelativeLayout onBoardingSection = (RelativeLayout) findViewById(R.id.onBoardingLayout);
        onBoardingSection.setVisibility(View.VISIBLE);
    }

    @Override
    protected void onResume() {
        super.onResume();

        if (!AWSMobileClient.defaultMobileClient().getIdentityManager().isUserSignedIn()) {
            // In the case that the activity is restarted by the OS after the application
            // is killed we must redirect to the splash activity to handle the sign-in flow.
            Intent intent = new Intent(this, SplashActivity.class);
            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(intent);
            return;
        }

        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // pause/resume Mobile Analytics collection
        awsMobileClient.handleOnResume();

        // register notification receiver
        LocalBroadcastManager.getInstance(this).registerReceiver(notificationReceiver,
            new IntentFilter(PushListenerService.ACTION_SNS_NOTIFICATION));
        // register settings changed receiver.
        LocalBroadcastManager.getInstance(this).registerReceiver(settingsChangedReceiver,
            new IntentFilter(UserSettings.ACTION_SETTINGS_CHANGED));
        updateColor();
        syncUserSettings();

        if(isCreated){
            theMapOnCreateMethod();
            theMapOnStartMethod();
            theMapOnResumeMethod();
        }
    }

    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        // Handle action bar item clicks here excluding the home button.

        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onSaveInstanceState(final Bundle bundle) {
        super.onSaveInstanceState(bundle);
        // Save the title so it will be restored properly to match the view loaded when rotation
        // was changed or in case the activity was destroyed.
        if (toolbar != null) {
            bundle.putCharSequence(BUNDLE_KEY_TOOLBAR_TITLE, "");
        }
    }

    @Override
    public void onClick(final View view) {
        if (view == signOutButton) {
            // The user is currently signed in with a provider. Sign out of that provider.
            identityManager.signOut();
            startActivity(new Intent(this, SignInActivity.class));
            finish();
            return;
        }

        // ... add any other button handling code here ...

    }

    private final BroadcastReceiver notificationReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            Log.d(LOG_TAG, "Received notification from local broadcast. Display it in a dialog.");

            Bundle data = intent.getBundleExtra(PushListenerService.INTENT_SNS_NOTIFICATION_DATA);
            String message = PushListenerService.getMessage(data);

            new AlertDialog.Builder(MainActivity.this)
                    .setTitle(R.string.push_demo_title)
                    .setMessage(message)
                    .setPositiveButton(android.R.string.ok, null)
                    .show();
        }
    };
    
    private final BroadcastReceiver settingsChangedReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            Log.d(LOG_TAG, "Received settings changed local broadcast. Update theme colors.");
            updateColor();
        }
    };

    @Override
    protected void onPause() {
        super.onPause();

        // Obtain a reference to the mobile client.
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // pause/resume Mobile Analytics collection
        awsMobileClient.handleOnPause();

        // unregister notification receiver
        LocalBroadcastManager.getInstance(this).unregisterReceiver(notificationReceiver);
        LocalBroadcastManager.getInstance(this).unregisterReceiver(settingsChangedReceiver);

        locationUpdater.theOnPauseMethod();
    }

    @Override
    public void onBackPressed() {
        final FragmentManager fragmentManager = this.getSupportFragmentManager();
        
        if (navigationDrawer.isDrawerOpen()) {
            navigationDrawer.closeDrawer();
            return;
        }

        if (fragmentManager.getBackStackEntryCount() == 0) {
            if (fragmentManager.findFragmentByTag(EgoStream.class.getSimpleName()) == null) {
                final Class fragmentClass = EgoStream.class;
                // if we aren't on the home fragment, navigate home.
                final Fragment fragment = Fragment.instantiate(this, fragmentClass.getName());

                fragmentManager
                    .beginTransaction()
                    .replace(R.id.main_fragment_container, fragment, fragmentClass.getSimpleName())
                    .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                    .commit();

                // Set the title for the fragment.
                final ActionBar actionBar = this.getSupportActionBar();
                if (actionBar != null) {
                    actionBar.setTitle("");
                }
                return;
            }
        }
        super.onBackPressed();
    }

    private void syncUserSettings() {
        // sync only if user is signed in
        if (AWSMobileClient.defaultMobileClient().getIdentityManager().isUserSignedIn()) {
            final UserSettings userSettings = UserSettings.getInstance(getApplicationContext());
            userSettings.getDataset().synchronize(new DefaultSyncCallback() {
                @Override
                public void onSuccess(final Dataset dataset, final List<Record> updatedRecords) {
                    super.onSuccess(dataset, updatedRecords);
                    Log.d(LOG_TAG, "successfully synced user settings");
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            updateColor();
                        }
                    });
                }
            });
        }
    }

    public void updateColor() {
        final UserSettings userSettings = UserSettings.getInstance(getApplicationContext());
        new AsyncTask<Void, Void, Void>() {
            @Override
            protected Void doInBackground(final Void... params) {
                userSettings.loadFromDataset();
                return null;
            }

            @Override
            protected void onPostExecute(final Void aVoid) {
                toolbar.setTitleTextColor(userSettings.getTitleTextColor());
                toolbar.setBackgroundColor(titleBarColor);
                final Fragment fragment = getSupportFragmentManager().findFragmentById(R.id.main_fragment_container);
                if (fragment != null) {
                    final View fragmentView = fragment.getView();
                    if (fragmentView != null) {
                        fragmentView.setBackgroundColor(userSettings.getBackgroudColor());
                    }
                }
            }
        }.execute();
    }

    private void setUpPageIndicator() {
        pageIndicator = (CirclePageIndicator)findViewById(R.id.titles);
        int tabPageColor = Color.parseColor("#662e2e2e");
        int tabFillColor = Color.parseColor("#2e2e2e");
        pageIndicator.setStrokeColor(tabPageColor);
        pageIndicator.setFillColor(tabFillColor);
        pageIndicator.setPageColor(tabPageColor);
        pageIndicator.setExtraSpacing(25f);
        pageIndicator.setViewPager(mViewPager);
    }




    /** Pager Adapter for OnBoarding process **/
    public class OnBoardPagerAdapter extends FragmentPagerAdapter {

        public OnBoardPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public int getCount() {
            return 3;
        }

        @Override
        public Fragment getItem(int pos) {
            String position = pos + "";
            Fragment fragment = (OnBoardingFragment) OnBoardingFragment.newInstance(position);

            ((OnBoardingFragment) fragment).setNavigationDrawer(navigationDrawer);
            ((OnBoardingFragment) fragment).prepareEgoStream(egoStream);
            return fragment;
        }

    }

    public void theMapOnCreateMethod(){
        System.out.println("MAINACTIVITY: theMapOnCreateMethod");

        locationUpdater.theOnCreateMethod();
    }

    public void theMapOnStartMethod(){
        System.out.println("MAINACTIVITY: theMapOnStartMethod");
        locationUpdater.theOnStartMethod();
    }

    @Nullable
    @Override
    public CharSequence onCreateDescription() {
        return super.onCreateDescription();
    }

    public void theMapOnResumeMethod(){
        System.out.println("MAINACTIVITY: theMapOnResumeMethod");
        locationUpdater.theOnResumeMethod();
    }


}
